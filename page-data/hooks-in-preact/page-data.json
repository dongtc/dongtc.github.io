{"componentChunkName":"component---src-templates-blog-post-js","path":"/hooks-in-preact/","webpackCompilationHash":"ccd37d6f356648959f91","result":{"data":{"site":{"siteMetadata":{"title":"Another Blog","author":"DQ"}},"markdownRemark":{"id":"1ea2341e-e138-5a1b-92a2-da0d9cded858","excerpt":"Preact是一个精简版(3k)的React实现，其对Hooks的实现代码也很简单，通过对源码的阅读，可以非常容易的理解Hooks的各种规则。 Hooks只能用在Function组件里，我们知道Class组件可以维持状态，而Funciton组件是没有状态的，那么Hooks的状态是存在哪里的呢？ 这里就需要对Preact…","html":"<p>Preact是一个精简版(3k)的React实现，其对Hooks的实现代码也很简单，通过对源码的阅读，可以非常容易的理解Hooks的各种规则。</p>\n<p>Hooks只能用在Function组件里，我们知道Class组件可以维持状态，而Funciton组件是没有状态的，那么Hooks的状态是存在哪里的呢？</p>\n<p>这里就需要对Preact的实现有一定了解了，实际上一个Function组件，Preact内部还是会将其转化成Class，也就是通过 <code class=\"language-text\">new React.Component()</code> 来生成一个组件实例，\n然后将Function函数赋值给实例的 <code class=\"language-text\">render</code> 方法。</p>\n<p>所以一个Function组件也是有一个组件实例的，所有的Hooks状态都存在这个实例上。</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// 通过函数是否有原型方法render来判断是否是Class组件</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'prototype'</span> <span class=\"token keyword\">in</span> newType <span class=\"token operator\">&amp;&amp;</span> newType<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>render<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    newVNode<span class=\"token punctuation\">.</span>_component <span class=\"token operator\">=</span> c <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">newType</span><span class=\"token punctuation\">(</span>newProps<span class=\"token punctuation\">,</span> cctx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    newVNode<span class=\"token punctuation\">.</span>_component <span class=\"token operator\">=</span> c <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Component</span><span class=\"token punctuation\">(</span>newProps<span class=\"token punctuation\">,</span> cctx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    c<span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">=</span> newType<span class=\"token punctuation\">;</span>\n    c<span class=\"token punctuation\">.</span>render <span class=\"token operator\">=</span> doRender<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">doRender</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props<span class=\"token punctuation\">,</span> state<span class=\"token punctuation\">,</span> context</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>这样，一个组件无论是Class还是Function，都是通过调用实例的 <code class=\"language-text\">render</code> 方法来拿到它要渲染的内容</p>\n<p>在调用 <code class=\"language-text\">render</code> 前我们拿到组件的实例，并存到当前正在执行的组件变量中</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>tmp <span class=\"token operator\">=</span> options<span class=\"token punctuation\">.</span>_render<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token function\">tmp</span><span class=\"token punctuation\">(</span>newVNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\ntmp <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">options._render</code> 是对外提供的钩子函数，用来功能扩展，现在我们进入Hooks的代码去看下。</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">let</span> currentIndex<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> currentComponent<span class=\"token punctuation\">;</span>\n\noptions<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">_render</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">vnode</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\tcurrentComponent <span class=\"token operator\">=</span> vnode<span class=\"token punctuation\">.</span>_component<span class=\"token punctuation\">;</span>\n\tcurrentIndex <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">currentComponent</code> 是一个全局变量，存放着当前正在执行(<code class=\"language-text\">render</code>)的函数实例，因为同一时间有且只有一个组件在执行，所以可以存在全局变量里</p>\n<p>接下来就到<code class=\"language-text\">useState</code>了</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">initialState</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token function\">useReducer</span><span class=\"token punctuation\">(</span>invokeOrReturn<span class=\"token punctuation\">,</span> initialState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>很明显，<code class=\"language-text\">useState</code>使用<code class=\"language-text\">useReducer</code>实现的，只是少了一个<code class=\"language-text\">reducer</code>处理的过程。</p>\n<p>为了便于理解，改下<code class=\"language-text\">useReduce</code>，直接实现<code class=\"language-text\">useState</code></p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">initialState</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 通过currentIndex获取当前hookState</span>\n    <span class=\"token keyword\">const</span> hookState <span class=\"token operator\">=</span> <span class=\"token function\">getHookState</span><span class=\"token punctuation\">(</span>currentIndex<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 如果是第一次执行</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>hookState<span class=\"token punctuation\">.</span>_component<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        hookState<span class=\"token punctuation\">.</span>_component <span class=\"token operator\">=</span> currentComponent<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 把value和setValue赋值，并返回</span>\n\t\thookState<span class=\"token punctuation\">.</span>_value <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n\t\t\tinitialState<span class=\"token punctuation\">,</span>  <span class=\"token comment\">// _value[0]</span>\n\t\t\t<span class=\"token parameter\">newValue</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hookState<span class=\"token punctuation\">.</span>_value<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!==</span> nextValue<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token comment\">// 当执行setValue时，会先把newValue到_value[0]</span>\n                    hookState<span class=\"token punctuation\">.</span>_value<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nextValue<span class=\"token punctuation\">;</span>\n                    <span class=\"token comment\">// 然后触发更新</span>\n\t\t\t\t\thookState<span class=\"token punctuation\">.</span>_component<span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> hookState<span class=\"token punctuation\">.</span>_value<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> currentComponent\n<span class=\"token keyword\">function</span> <span class=\"token function\">getHookState</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">index</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 在组件实例上有一个list，每次执行到hook函数，就根据currentIndex拿到hook值</span>\n\t<span class=\"token keyword\">const</span> hooks <span class=\"token operator\">=</span>\n\t\tcurrentComponent<span class=\"token punctuation\">.</span>__hooks <span class=\"token operator\">||</span>\n\t\t<span class=\"token punctuation\">(</span>currentComponent<span class=\"token punctuation\">.</span>__hooks <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> _list<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> _pendingEffects<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">>=</span> hooks<span class=\"token punctuation\">.</span>_list<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\thooks<span class=\"token punctuation\">.</span>_list<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// 取hook数据是通过数组下标，所以你的写的hook函数的顺序不能改变!</span>\n\t<span class=\"token keyword\">return</span> hooks<span class=\"token punctuation\">.</span>_list<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>如果我们这样定义一个<code class=\"language-text\">useState</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>value<span class=\"token punctuation\">,</span> setValue<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>当执行setValue时，实际上执行了<code class=\"language-text\">hookState._component.setState({})</code>，它会触发组件实例<code class=\"language-text\">render</code>方法的执行，下一次执行function代码时，\n<code class=\"language-text\">hookState._value[0]</code>已经被改变，直接返回，这样拿到的就是新的value了。</p>\n<p>接下来看下useEffect</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">callback<span class=\"token punctuation\">,</span> args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 第一步依然是获取hookState</span>\n    <span class=\"token keyword\">const</span> state <span class=\"token operator\">=</span> <span class=\"token function\">getHookState</span><span class=\"token punctuation\">(</span>currentIndex<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 然后对传入的参数对比有没有变化</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">argsChanged</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">.</span>_args<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 有变化就存下来</span>\n\t\tstate<span class=\"token punctuation\">.</span>_value <span class=\"token operator\">=</span> callback<span class=\"token punctuation\">;</span>\n        state<span class=\"token punctuation\">.</span>_args <span class=\"token operator\">=</span> args<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 添加到一个待执行队列里</span>\n\t\tcurrentComponent<span class=\"token punctuation\">.</span>__hooks<span class=\"token punctuation\">.</span>_pendingEffects<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>参数对比的函数是这样的</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">argsChanged</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">oldArgs<span class=\"token punctuation\">,</span> newArgs</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token operator\">!</span>oldArgs <span class=\"token operator\">||</span> newArgs<span class=\"token punctuation\">.</span><span class=\"token function\">some</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arg<span class=\"token punctuation\">,</span> index</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> arg <span class=\"token operator\">!==</span> oldArgs<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>我们知道useEffect的第二个参数可以控制更新，有三种情况：</p>\n<ol>\n<li>无参数，那就认为每次都变化，都执行</li>\n<li>[], 一个空数组，只会执行一次，用来模拟componentDidMount</li>\n<li>非空数组，依次对比数组项，有变化就执行</li>\n</ol>\n<p>当然看代码就知道2、3是一种情况</p>\n<p>如果有变化，我们把state存入当前组件的待更新队列里，接下来就是要触发队列的执行了，什么时候执行呢？</p>\n<p>useEffect的执行需要在组件render完毕，且浏览器下一帧渲染完毕，这里就可以用<code class=\"language-text\">requestAnimationFrame</code></p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// 这里存的是组件的队列，每个组件中有effect队列</span>\n<span class=\"token keyword\">let</span> afterPaintEffects <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\noptions<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">diffed</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">vnode</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">const</span> c <span class=\"token operator\">=</span> vnode<span class=\"token punctuation\">.</span>_component<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>c<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">const</span> hooks <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span>__hooks<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hooks<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 组件执行结束如果有effect，添加到组件队列中</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hooks<span class=\"token punctuation\">.</span>_pendingEffects<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">afterPaint</span><span class=\"token punctuation\">(</span>afterPaintEffects<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token function-variable function\">afterPaint</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">newQueueLength</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 这里判断数组长度为1，也就是当afterPaintEffects 待执行组件队列第一次有值，就开始准备flush</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>newQueueLength <span class=\"token operator\">===</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">requestAnimationFrame</span><span class=\"token punctuation\">(</span>flushAfterPaintEffects<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>如果看过<code class=\"language-text\">setState</code>的异步执行代码，会发现这里如出一撤，在队里长度为1时执行<code class=\"language-text\">requestAnimationFrame</code>,\n<code class=\"language-text\">requestAnimationFrame</code>里的函数会延迟到下一帧才执行，在空闲的这一段时间，待执行队列里会被同步的push数据，所以多次执行setState，并不会多次触发更新，\nuseEffect也是如此。</p>\n<p>接下来看flush方法</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token function\">flushAfterPaintEffects</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tafterPaintEffects<span class=\"token punctuation\">.</span><span class=\"token function\">some</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">component</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>component<span class=\"token punctuation\">.</span>_parentDom<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\tcomponent<span class=\"token punctuation\">.</span>__hooks<span class=\"token punctuation\">.</span>_pendingEffects<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>invokeCleanup<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tcomponent<span class=\"token punctuation\">.</span>__hooks<span class=\"token punctuation\">.</span>_pendingEffects<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>invokeEffect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tcomponent<span class=\"token punctuation\">.</span>__hooks<span class=\"token punctuation\">.</span>_pendingEffects <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tafterPaintEffects <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>一个循环遍历执行掉队列，就结束了</p>\n<p>最后，useEffect接受的函数，可以返回一个销毁函数,\n这里的<code class=\"language-text\">invokeCleanup</code>就是先执行销毁。</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">invokeCleanup</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">hook</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hook<span class=\"token punctuation\">.</span>_cleanup<span class=\"token punctuation\">)</span> hook<span class=\"token punctuation\">.</span><span class=\"token function\">_cleanup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">invokeEffect</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">hook</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> hook<span class=\"token punctuation\">.</span><span class=\"token function\">_value</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 如果有销毁函数，就存下来</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> result <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span> hook<span class=\"token punctuation\">.</span>_cleanup <span class=\"token operator\">=</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>以上就是核心的两个Hooks实现了</p>","frontmatter":{"title":"React Hooks 在Preact中的实现","date":"November 01, 2019","description":""}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/hooks-in-preact/","previous":null,"next":null}}}