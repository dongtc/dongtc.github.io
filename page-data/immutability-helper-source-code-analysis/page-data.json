{"componentChunkName":"component---src-templates-blog-post-js","path":"/immutability-helper-source-code-analysis/","webpackCompilationHash":"62127f5d2df51b2f4e32","result":{"data":{"site":{"siteMetadata":{"title":"Another Blog","author":"DQ"}},"markdownRemark":{"id":"793ec653-e92b-5cee-bc0c-d4e4a1dc76b0","excerpt":"immutability-helper 是React推荐的两个immutable库之一，另一个是immer，代码比较简洁，先看下简单的使用，然后分析源码实现。 immutability-helper使用类似MongoDB…","html":"<p><a href=\"https://github.com/kolodny/immutability-helper\">immutability-helper</a> 是React推荐的两个immutable库之一，另一个是<a href=\"https://github.com/immerjs/immer\">immer</a>，代码比较简洁，先看下简单的使用，然后分析源码实现。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> update <span class=\"token keyword\">from</span> <span class=\"token string\">'immutability-helper'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> state1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>a<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> state2 <span class=\"token operator\">=</span> <span class=\"token function\">update</span><span class=\"token punctuation\">(</span>state1<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>a<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>$push<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>state1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>not<span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span>state2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>state1<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>not<span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span>state2<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>state1<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBe</span><span class=\"token punctuation\">(</span>state2<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>immutability-helper使用类似MongoDB的语法来定义对对象的操作，除了<code class=\"language-text\">$push</code>还有<code class=\"language-text\">$set</code>、<code class=\"language-text\">$splice</code>…等等。</p>\n<p>核心代码如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">object<span class=\"token punctuation\">,</span> $spec</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">const</span> spec <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> $spec <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token punctuation\">{</span> $apply<span class=\"token punctuation\">:</span> $spec <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">:</span> $spec<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> nextObject <span class=\"token operator\">=</span> object<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">getAllKeys</span><span class=\"token punctuation\">(</span>spec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>commands<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">const</span> objectWasNextObject <span class=\"token operator\">=</span> object <span class=\"token operator\">===</span> nextObject<span class=\"token punctuation\">;</span>\n\t\t\tnextObject <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>commands<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>spec<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> nextObject<span class=\"token punctuation\">,</span> spec<span class=\"token punctuation\">,</span> object<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>objectWasNextObject <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEquals</span><span class=\"token punctuation\">(</span>nextObject<span class=\"token punctuation\">,</span> object<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\tnextObject <span class=\"token operator\">=</span> object<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">const</span> nextValueForKey <span class=\"token operator\">=</span> <span class=\"token function\">type</span><span class=\"token punctuation\">(</span>object<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token string\">'Map'</span>\n\t\t\t\t<span class=\"token operator\">?</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span>object<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> spec<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token punctuation\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span>object<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> spec<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">const</span> nextObjectValue <span class=\"token operator\">=</span> <span class=\"token function\">type</span><span class=\"token punctuation\">(</span>nextObject<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token string\">'Map'</span>\n\t\t\t\t<span class=\"token operator\">?</span> nextObject<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token punctuation\">:</span> nextObject<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEquals</span><span class=\"token punctuation\">(</span>nextValueForKey<span class=\"token punctuation\">,</span> nextObjectValue<span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token operator\">||</span> <span class=\"token keyword\">typeof</span> nextValueForKey <span class=\"token operator\">===</span> <span class=\"token string\">'undefined'</span>\n\t\t\t\t\t<span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>object<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nextObject <span class=\"token operator\">===</span> object<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t\tnextObject <span class=\"token operator\">=</span> <span class=\"token function\">copy</span><span class=\"token punctuation\">(</span>object<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">type</span><span class=\"token punctuation\">(</span>nextObject<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token string\">'Map'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t\tnextObject<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> nextValueForKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t\t<span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t\tnextObject<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> nextValueForKey<span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> nextObject<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>先把原始对象赋值给新变量<code class=\"language-text\">nextObject</code>，<code class=\"language-text\">getAllKeys</code>就是<code class=\"language-text\">Object.keys</code>只是添加了对<code class=\"language-text\">Symbol</code>的支持，如果key是一个操作符($push、$set…)那就执行这个操作方法，\n我们以<code class=\"language-text\">$push</code>为例：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">$push</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value<span class=\"token punctuation\">,</span> nextObject<span class=\"token punctuation\">,</span> spec</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> value<span class=\"token punctuation\">.</span>length <span class=\"token operator\">?</span> nextObject<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> nextObject<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>使用数组的<code class=\"language-text\">concat</code>方法会返回一个新的数组，而如果用<code class=\"language-text\">push</code>方法是不会改变原数组的，所有操作符方法都要做到这一点，返回新对象，新的对象赋值给nextObject。</p>\n<p>而如果key不是一个操作符，那么就递归调用<code class=\"language-text\">update</code>，将调用update返回的子对象的值和直接取key得到的子对象的值对比，如果发生变化那就要把当前对象浅拷贝，因为子对象改变，它的所有父级对象都要改变，最后子对象赋值到当前对象上，并返回。</p>\n<p>整个过程很简单就是一个递归</p>\n<p>这里有两处不好理解的地方</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>commands<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> objectWasNextObject <span class=\"token operator\">=</span> object <span class=\"token operator\">===</span> nextObject<span class=\"token punctuation\">;</span>\n  nextObject <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>commands<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>spec<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> nextObject<span class=\"token punctuation\">,</span> spec<span class=\"token punctuation\">,</span> object<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>objectWasNextObject <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEquals</span><span class=\"token punctuation\">(</span>nextObject<span class=\"token punctuation\">,</span> object<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    nextObject <span class=\"token operator\">=</span> object<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">isEquals</code>就是用<code class=\"language-text\">===</code>来判断的，如果两个对象相等了，为啥还要进行<code class=\"language-text\">nextObject = object</code>赋值呢。</p>\n<p>原因是这里<code class=\"language-text\">isEquals</code>是可以扩展的，比如你可以用深拷贝来实现，自定义相等的逻辑。</p>\n<p>还有一点就是</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> objectWasNextObject <span class=\"token operator\">=</span> object <span class=\"token operator\">===</span> nextObject<span class=\"token punctuation\">;</span></code></pre></div>\n<p>$spec不支持多个操作符如<code class=\"language-text\">{a: {$push: [2], $set: [2]}}</code>，那什么时候<code class=\"language-text\">objectWasNextObject</code>为false，通过在这里打个条件断点，跑下测试用例，发现false的场景为：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'can handle nibling directives'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>a<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">:</span> <span class=\"token string\">'me'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> spec <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    a<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>$splice<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    $merge<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>b<span class=\"token punctuation\">:</span> <span class=\"token string\">'you'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span> spec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toEqual</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>a<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">:</span> <span class=\"token string\">'you'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>对<code class=\"language-text\">a</code>属性修改后，还可以通过<code class=\"language-text\">$merge</code>对整个对象修改，这个时候整个对象已经被浅拷贝改过了，就不需要再判断一次了。</p>\n<p>immutable要实现的基本功能是不改变原对象，它返回的对象中子对象修改，它的所有父级对象引用都要改变，而它的兄弟节点对象引用不变。这就是它比深拷贝性能高的原因。</p>\n<p><code class=\"language-text\">immutability-helper</code>通过声明修改路径和修改操作符的方式，利用递归，很简洁的实现了immutable。</p>","frontmatter":{"title":"immutability-helper 源码分析","date":"November 14, 2019","description":""}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/immutability-helper-source-code-analysis/","previous":{"fields":{"slug":"/hooks-in-preact/"},"frontmatter":{"title":"React Hooks 在Preact中的实现"}},"next":null}}}